{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Projetos\\\\nwl\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var nextRendomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      playNext: playNext,\n      hasNext: hasNext,\n      playPrevious: playPrevious,\n      hasPrevious: hasPrevious,\n      isPlaying: isPlaying,\n      isLooping: isLooping,\n      isShuffling: isShuffling,\n      toggleLoop: toggleLoop,\n      togglePlay: togglePlay,\n      toggleShuffle: toggleShuffle,\n      setPlayingState: setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Projetos/nwl/podcastrnext/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","hasPrevious","hasNext","length","playNext","nextRendomEpisodeIndex","Math","floor","random","playPrevious","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\r\n\r\ntype Episode = {\r\n  title: string;\r\n  members: string;\r\n  thumbnail: string;\r\n  duration: number;\r\n  url: string;\r\n}\r\n\r\ntype PlayerContextData = {\r\n  episodeList: Episode[];\r\n  currentEpisodeIndex: number;\r\n  isPlaying: boolean;\r\n  isLooping: boolean;\r\n  isShuffling: boolean;\r\n  play: (episode: Episode) => void;\r\n  playList: (list: Episode[], index: number) => void;\r\n  playNext: () => void;\r\n  playPrevious: () => void;\r\n  setPlayingState: (state: boolean) => void;\r\n  togglePlay: () => void;\r\n  toggleLoop: () => void;\r\n  toggleShuffle: () => void;\r\n  hasNext: boolean;\r\n  hasPrevious: boolean;\r\n\r\n};\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\r\n  const [episodeList, setEpisodeList] = useState([]);\r\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isLooping, setIsLooping] = useState(false);\r\n  const [isShuffling, setIsShuffling] = useState(false);\r\n\r\n\r\n  function play(episode: Episode) {\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeIndex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function playList(list: Episode[], index: number) {\r\n    setEpisodeList(list);\r\n    setCurrentEpisodeIndex(index);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  const hasPrevious = currentEpisodeIndex > 0;\r\n  const hasNext = (currentEpisodeIndex + 1) < episodeList.length;\r\n\r\n  function playNext() {\r\n    if (isShuffling) { \r\n      const nextRendomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\r\n    } else if (hasNext) {\r\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n    }\r\n  }\r\n\r\n  function playPrevious() {\r\n    if (hasPrevious) {\r\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\r\n    }\r\n  }\r\n\r\n  function togglePlay() {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function toggleLoop() {\r\n    setIsLooping(!isLooping);\r\n  }\r\n\r\n  function toggleShuffle() {\r\n    setIsShuffling(!isShuffling);\r\n  }\r\n\r\n  function setPlayingState(state: boolean) {\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  return (\r\n    <PlayerContext.Provider\r\n      value={{\r\n        episodeList,\r\n        currentEpisodeIndex,\r\n        play,\r\n        playList,\r\n        playNext,\r\n        hasNext,\r\n        playPrevious,\r\n        hasPrevious,\r\n        isPlaying,\r\n        isLooping,\r\n        isShuffling,\r\n        toggleLoop,\r\n        togglePlay,\r\n        toggleShuffle,\r\n        setPlayingState\r\n      }}>\r\n      {children}\r\n    </PlayerContext.Provider>)\r\n}\r\n\r\nexport const usePlayer = () => {\r\n  return useContext(PlayerContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}